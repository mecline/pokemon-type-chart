{"version":3,"sources":["components/DamageCalculator.js","components/TypeTable.js","components/PokeInfo.js","App.js","serviceWorker.js","index.js"],"names":["damageCalculator","typeChart","damageCalcs","offense","calculatedTypeChart","map","typeCalcs","double_damage_to","typing","applyTypeChange","half_damage_to","no_damage_to","double_damage_from","half_damage_from","no_damage_from","damageAmount","newDamage","get","name","set","generateTableData","doubleDamage","halfDamage","noDamage","forEach","value","key","push","toString","TypeTable","tableData","prevProps","this","props","style","maxWidth","columns","title","field","data","options","search","sorting","filtering","grouping","selection","paging","React","Component","PokeInfo","handleNameChange","event","newValue","target","setState","editingUserPokemon","handleNameSubmit","e","preventDefault","newPokemon","state","userPokemon","loading","handleToggleOffense","typeInfoRef","createRef","pokemonName","pokemonImage","pokemonTypeOne","pokemonTypeTwo","errorMessage","Map","typingDamageCalcs","Promise","all","fetchAPIPokemonAndTypes","initTypeChart","getPokemonData","pokemonData","types","type","a","getTypeMatch","url","typeAPIFetch","damage_relations","fetch","typeResponse","status","json","typeChartData","results","response","species","sprites","APIUrlForType","typeData","typeOne","typeTwo","padding","textAlign","Grid","TextField","className","variant","onChange","Button","onClick","Fragment","src","front_default","alt","App","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b061aa2.chunk.js","sourcesContent":["export default function damageCalculator(typeChart, damageCalcs, offense) {\r\n    // let listOfDamageTypes = ['double_damage_from', 'double_damage_to', 'half_damage_from', 'half_damage_to', 'no_damage_from', 'no_damage_to'];\r\n    let calculatedTypeChart = typeChart;\r\n\r\n    damageCalcs.map(typeCalcs => {\r\n        if (!offense) {\r\n            typeCalcs.damageCalcs.double_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 2));\r\n            })\r\n            typeCalcs.damageCalcs.half_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0.5));\r\n            })\r\n            typeCalcs.damageCalcs.no_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0));\r\n            })\r\n        }\r\n        else {\r\n            typeCalcs.damageCalcs.double_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 2));\r\n            })\r\n            typeCalcs.damageCalcs.half_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0.5));\r\n            })\r\n            typeCalcs.damageCalcs.no_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0));\r\n            })\r\n        }\r\n        return (typeCalcs);\r\n    })\r\n    return (calculatedTypeChart);\r\n}\r\n\r\n\r\nfunction applyTypeChange(calculatedTypeChart, typing, damageAmount) {\r\n    let prevDamage = calculatedTypeChart.get(typing.name);\r\n    let newDamage = prevDamage * damageAmount;\r\n    calculatedTypeChart.set(typing.name, newDamage)\r\n    return (calculatedTypeChart);\r\n}\r\n\r\nexport function generateTableData(calculatedTypeChart) {\r\n    let doubleDamage = [];\r\n    let halfDamage = [];\r\n    let noDamage = [];\r\n    calculatedTypeChart.forEach((value, key) => {\r\n        if (value === 2) {\r\n            doubleDamage.push(key);\r\n        }\r\n        else if (value === 0.5) {\r\n            halfDamage.push(key);\r\n        }\r\n        else if (value === 0) {\r\n            noDamage.push(key);\r\n        }\r\n    })\r\n    let damageTableData = [{ 'doubleDamage': doubleDamage.toString(), 'halfDamage': halfDamage.toString(), 'noDamage': noDamage.toString() }];\r\n    return (damageTableData)\r\n}","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { generateTableData } from './DamageCalculator';\r\n\r\nclass TypeTable extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.tableData = {};\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.typeChart !== this.props.typeChart) {\r\n            this.tableData = generateTableData(this.props.tableData);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { typeChart } = this.props;\r\n\r\n        this.tableData = generateTableData(typeChart);\r\n\r\n        return (\r\n            <div>\r\n                {this.tableData && <div style={{ maxWidth: '100%' }}>\r\n                    <MaterialTable\r\n                        columns={[\r\n                            { title: 'x2 Damage', field: 'doubleDamage' },\r\n                            { title: '0.5 Damage', field: 'halfDamage' },\r\n                            { title: 'No Damage', field: 'noDamage' }\r\n                        ]}\r\n                        data={this.tableData}\r\n                        title=\"Type Matchups\"\r\n                        options={{\r\n                            search: false,\r\n                            sorting: false,\r\n                            filtering: false,\r\n                            grouping: false,\r\n                            selection: false,\r\n                            paging: false\r\n                        }}\r\n                    />\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeTable;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button } from '@material-ui/core';\r\nimport TypeTable from './TypeTable';\r\nimport damageCalculator from './DamageCalculator';\r\n\r\nclass PokeInfo extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.typeInfoRef = React.createRef();\r\n        this.state = {\r\n            userPokemon: 'pikachu',\r\n            editingUserPokemon: '',\r\n            offense: true,\r\n            loading: true,\r\n            pokemonName: null,\r\n            pokemonImage: null,\r\n            pokemonTypeOne: null,\r\n            pokemonTypeTwo: null,\r\n            errorMessage: \"\"\r\n        };\r\n        this.typeChart = new Map();\r\n        this.typingDamageCalcs = [];\r\n        this.calculatedTypeChart = [];\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Promise.all([\r\n            this.fetchAPIPokemonAndTypes(),\r\n            this.initTypeChart()\r\n        ])\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.loading) {\r\n            this.typingDamageCalcs = [];\r\n            this.initTypeChart();\r\n            this.fetchAPIPokemonAndTypes();\r\n        }\r\n    }\r\n\r\n    async fetchAPIPokemonAndTypes() {\r\n        this.calculatedTypeChart = [];\r\n        this.typingDamageCalcs = [];\r\n        const pokemonData = await this.getPokemonData();\r\n        await Promise.all(\r\n            pokemonData.types.map(async (type) => {\r\n                const typeAPIFetch = await this.getTypeMatch(type.type.url);\r\n                this.typingDamageCalcs.push({\r\n                    'type': typeAPIFetch.name,\r\n                    'damageCalcs': typeAPIFetch.damage_relations\r\n                })\r\n                return (this.typingDamageCalcs);\r\n            })\r\n        )\r\n        this.calculatedTypeChart = damageCalculator(this.typeChart, this.typingDamageCalcs, this.state.offense);\r\n        this.setState({ loading: false });\r\n    }\r\n\r\n    async initTypeChart() {\r\n        const typeUrl = 'https://pokeapi.co/api/v2/type/';\r\n        const typeResponse = await fetch(typeUrl);\r\n        if (typeResponse.status === 200) {\r\n            let typeChartData = await typeResponse.json();\r\n            typeChartData && typeChartData.results.map(typing => {\r\n                return (this.typeChart.set(typing.name, 1));\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"Type Chart Not Fetched\",\r\n            })\r\n        }\r\n    }\r\n\r\n    async getPokemonData() {\r\n        const url = 'https://pokeapi.co/api/v2/pokemon/' + this.state.userPokemon + '/';\r\n        const response = await fetch(url);\r\n        if (response.status === 200) {\r\n            const pokemonData = await response.json();\r\n            this.setState({\r\n                pokemonName: pokemonData.species.name,\r\n                pokemonTypeOne: pokemonData.types[0],\r\n                pokemonTypeTwo: (pokemonData.types[1] ? pokemonData.types[1] : null),\r\n                pokemonImage: (pokemonData.sprites),\r\n                loading: false,\r\n                errorMessage: \"\"\r\n            });\r\n            return (pokemonData);\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"That Pokemon doesn't exist in the database, check spelling or choose one with similar typing.\",\r\n            });\r\n        }\r\n    }\r\n\r\n    async getTypeMatch(APIUrlForType) {\r\n        const url = APIUrlForType;\r\n        const response = await fetch(url);\r\n        if (response.status === 200) {\r\n            let typeData = await response.json();\r\n            return (typeData);\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"An error occured when fetching type matchups.\",\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({ editingUserPokemon: newValue });\r\n    }\r\n\r\n    handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        let newPokemon = this.state.editingUserPokemon;\r\n        this.setState({ userPokemon: newPokemon, loading: true });\r\n    }\r\n\r\n    handleToggleOffense = () => {\r\n        this.setState({ offense: !this.state.offense, loading: true });\r\n    }\r\n\r\n    render() {\r\n        let typeOne = this.state.pokemonTypeOne;\r\n        let typeTwo = this.state.pokemonTypeTwo;\r\n\r\n        return (\r\n            <div style={{ padding: '10px', textAlign: 'center' }}>\r\n                <Grid>\r\n                    <TextField className=\"userInput\"\r\n                        variant='outlined'\r\n                        value={this.state.editingUserPokemon}\r\n                        onChange={this.handleNameChange}\r\n                    />\r\n                    <Button onClick={this.handleNameSubmit}>\r\n                        Submit\r\n                    </Button>\r\n                    <Button onClick={this.handleToggleOffense}>\r\n                        {this.state.offense ? 'Showing Offense' : 'Showing Defense'}\r\n                    </Button>\r\n                </Grid>\r\n\r\n                <React.Fragment>\r\n                    {this.state.errorMessage ? this.state.errorMessage :\r\n                        <div className=\"formInline\">\r\n                            {this.state.loading ? 'Loading...' : 'You entered: ' + this.state.pokemonName + '. ' +\r\n                                typeOne.type.name + (typeTwo && typeTwo.type.name ? ', ' + typeTwo.type.name : '')}\r\n                            {this.state.pokemonImage ? <img src={this.state.pokemonImage.front_default} alt='Not found' /> : ''}\r\n\r\n                        </div>\r\n                    }\r\n                </React.Fragment>\r\n                <TypeTable style={{ padding: '10px' }}\r\n                    typeChart={this.typeChart}\r\n                    damageCalcs={this.typingDamageCalcs}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokeInfo;","import React from 'react';\nimport './App.css';\nimport PokeInfo from './components/PokeInfo'\nimport { Toolbar } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <div className=\"homePage\">\n      <Toolbar className=\"toolbar\"></Toolbar>\n      <PokeInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}