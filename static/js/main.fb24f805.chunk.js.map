{"version":3,"sources":["data/type_.png","data/type_BUG.png","data/type_DARK.png","data/type_DRAGON.png","data/type_ELECTRIC.png","data/type_FAIRY.png","data/type_FIGHTING.png","data/type_FIRE.png","data/type_FLYING.png","data/type_GHOST.png","data/type_GRASS.png","data/type_GROUND.png","data/type_ICE.png","data/type_NORMAL.png","data/type_POISON.png","data/type_PSYCHIC.png","data/type_ROCK.png","data/type_STEEL.png","data/type_WATER.png","components/DamageCalculator.js","data/types.js","components/TypeTable.js","components/PokeInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","damageCalculator","typeChart","damageCalcs","offense","calculatedTypeChart","map","typeCalcs","double_damage_to","typing","applyTypeChange","half_damage_to","no_damage_to","double_damage_from","half_damage_from","no_damage_from","damageAmount","newDamage","get","name","set","generateTableData","doubleDamage","halfDamage","noDamage","forEach","value","key","push","toString","typeImages","require","TypeTable","tableData","prevProps","this","props","rowObject","imagesList","imgTags","split","type","image","includes","style","height","width","src","alt","typeName","imageSrc","typeOne","typeTwo","typeOneTitle","findImageFromTypeName","typeTwoTitle","maxWidth","justifyContent","alignItems","display","columns","title","field","render","rowData","customRowRender","data","options","search","sorting","filtering","grouping","selection","paging","React","Component","PokeInfo","handleNameChange","event","newValue","target","setState","editingUserPokemon","handleNameSubmit","e","preventDefault","newPokemon","state","userPokemon","loading","handleToggleOffense","typeInfoRef","createRef","pokemonName","pokemonImage","pokemonTypeOne","pokemonTypeTwo","errorMessage","Map","typingDamageCalcs","Promise","all","fetchAPIPokemonAndTypes","initTypeChart","getPokemonData","pokemonData","types","a","getTypeMatch","url","typeAPIFetch","damage_relations","fetch","typeResponse","status","json","typeChartData","results","response","console","log","species","sprites","APIUrlForType","typeData","padding","Grid","container","spacing","direction","item","xs","TextField","className","variant","onChange","Button","onClick","front_default","flexWrap","sx","color","fontSize","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb24f805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/type_.32219699.png\";","module.exports = __webpack_public_path__ + \"static/media/type_BUG.72e87d8f.png\";","module.exports = __webpack_public_path__ + \"static/media/type_DARK.017593fb.png\";","module.exports = __webpack_public_path__ + \"static/media/type_DRAGON.7005a64b.png\";","module.exports = __webpack_public_path__ + \"static/media/type_ELECTRIC.d8fec9e6.png\";","module.exports = __webpack_public_path__ + \"static/media/type_FAIRY.b5eb1904.png\";","module.exports = __webpack_public_path__ + \"static/media/type_FIGHTING.b6d3f059.png\";","module.exports = __webpack_public_path__ + \"static/media/type_FIRE.34db28a1.png\";","module.exports = __webpack_public_path__ + \"static/media/type_FLYING.ff18e913.png\";","module.exports = __webpack_public_path__ + \"static/media/type_GHOST.aacf7da2.png\";","module.exports = __webpack_public_path__ + \"static/media/type_GRASS.06bec833.png\";","module.exports = __webpack_public_path__ + \"static/media/type_GROUND.df8900f0.png\";","module.exports = __webpack_public_path__ + \"static/media/type_ICE.6dbda2f2.png\";","module.exports = __webpack_public_path__ + \"static/media/type_NORMAL.80965fcf.png\";","module.exports = __webpack_public_path__ + \"static/media/type_POISON.db8a6abc.png\";","module.exports = __webpack_public_path__ + \"static/media/type_PSYCHIC.8898e3e0.png\";","module.exports = __webpack_public_path__ + \"static/media/type_ROCK.92dd1da2.png\";","module.exports = __webpack_public_path__ + \"static/media/type_STEEL.952e8fbf.png\";","module.exports = __webpack_public_path__ + \"static/media/type_WATER.aa9f8ef3.png\";","export default function damageCalculator(typeChart, damageCalcs, offense) {\r\n    // let listOfDamageTypes = ['double_damage_from', 'double_damage_to', 'half_damage_from', 'half_damage_to', 'no_damage_from', 'no_damage_to'];\r\n    let calculatedTypeChart = typeChart;\r\n\r\n    damageCalcs.map(typeCalcs => {\r\n        if (!offense) {\r\n            typeCalcs.damageCalcs.double_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 2));\r\n            })\r\n            typeCalcs.damageCalcs.half_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0.5));\r\n            })\r\n            typeCalcs.damageCalcs.no_damage_from.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0));\r\n            })\r\n        }\r\n        else {\r\n            typeCalcs.damageCalcs.double_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 2));\r\n            })\r\n            typeCalcs.damageCalcs.half_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0.5));\r\n            })\r\n            typeCalcs.damageCalcs.no_damage_to.map(typing => {\r\n                return (applyTypeChange(calculatedTypeChart, typing, 0));\r\n            })\r\n        }\r\n        return (typeCalcs);\r\n    })\r\n    return (calculatedTypeChart);\r\n}\r\n\r\n\r\nfunction applyTypeChange(calculatedTypeChart, typing, damageAmount) {\r\n    let prevDamage = calculatedTypeChart.get(typing.name);\r\n    let newDamage = prevDamage * damageAmount;\r\n    calculatedTypeChart.set(typing.name, newDamage)\r\n    return (calculatedTypeChart);\r\n}\r\n\r\nexport function generateTableData(calculatedTypeChart) {\r\n    let doubleDamage = [];\r\n    let halfDamage = [];\r\n    let noDamage = [];\r\n    calculatedTypeChart.forEach((value, key) => {\r\n        if (value === 2) {\r\n            doubleDamage.push(key);\r\n        }\r\n        else if (value === 0.5) {\r\n            halfDamage.push(key);\r\n        }\r\n        else if (value === 0) {\r\n            noDamage.push(key);\r\n        }\r\n    })\r\n    let damageTableData = [{ 'doubleDamage': doubleDamage.toString(), 'halfDamage': halfDamage.toString(), 'noDamage': noDamage.toString() }];\r\n    return (damageTableData)\r\n}","export const typeImages = [\r\n    {\r\n        \"name\": \"unknown\",\r\n        \"image\": require('./type_.png')\r\n    },\r\n    {\r\n        \"name\": \"bug\",\r\n        \"image\": require('./type_BUG.png')\r\n    },\r\n    {\r\n        \"name\": \"dark\",\r\n        \"image\": require('./type_DARK.png')\r\n    },\r\n    {\r\n        \"name\": \"dragon\",\r\n        \"image\": require('./type_DRAGON.png')\r\n    },\r\n    {\r\n        \"name\": \"electric\",\r\n        \"image\": require('./type_ELECTRIC.png')\r\n    },\r\n    {\r\n        \"name\": \"fairy\",\r\n        \"image\": require('./type_FAIRY.png')\r\n    },\r\n    {\r\n        \"name\": \"fighting\",\r\n        \"image\": require('./type_FIGHTING.png')\r\n    },\r\n    {\r\n        \"name\": \"fire\",\r\n        \"image\": require('./type_FIRE.png')\r\n    },\r\n    {\r\n        \"name\": \"flying\",\r\n        \"image\": require('./type_FLYING.png')\r\n    },\r\n    {\r\n        \"name\": \"ghost\",\r\n        \"image\": require('./type_GHOST.png')\r\n    },\r\n    {\r\n        \"name\": \"grass\",\r\n        \"image\": require('./type_GRASS.png')\r\n    },\r\n    {\r\n        \"name\": \"ground\",\r\n        \"image\": require('./type_GROUND.png')\r\n    },\r\n    {\r\n        \"name\": \"ice\",\r\n        \"image\": require('./type_ICE.png')\r\n    },\r\n    {\r\n        \"name\": \"normal\",\r\n        \"image\": require('./type_NORMAL.png')\r\n    },\r\n    {\r\n        \"name\": \"poison\",\r\n        \"image\": require('./type_POISON.png')\r\n    },\r\n    {\r\n        \"name\": \"psychic\",\r\n        \"image\": require('./type_PSYCHIC.png')\r\n    },\r\n    {\r\n        \"name\": \"rock\",\r\n        \"image\": require('./type_ROCK.png')\r\n    },\r\n    {\r\n        \"name\": \"steel\",\r\n        \"image\": require('./type_STEEL.png')\r\n    },\r\n    {\r\n        \"name\": \"water\",\r\n        \"image\": require('./type_WATER.png')\r\n    }\r\n]\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { generateTableData } from './DamageCalculator';\r\nimport { typeImages } from '../data/types';\r\n\r\nclass TypeTable extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.tableData = {};\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.typeChart !== this.props.typeChart) {\r\n            this.tableData = generateTableData(this.props.tableData);\r\n        }\r\n    }\r\n\r\n    customRowRender(rowObject) {\r\n        let imagesList = [];\r\n        let imgTags = [];\r\n        let rowTypes = rowObject.split(',');\r\n        rowTypes.forEach(type => {\r\n            typeImages.map(image =>\r\n                type.includes(image.name) && imagesList.push(image.image)\r\n            )\r\n            return imagesList;\r\n        })\r\n        imagesList.forEach(image => {\r\n            imgTags.push(<img style={{ height: '50px', width: '100px' }}\r\n                src={image} alt={image.split('_')[1].split('.')[0]} />);\r\n        })\r\n        return (imgTags)\r\n    }\r\n\r\n    findImageFromTypeName(typeName) {\r\n        let imageSrc = \"\";\r\n        typeImages.map(image => {\r\n            if (typeName.includes(image.name)) {\r\n                imageSrc = image.image\r\n            }\r\n            return imageSrc;\r\n        })\r\n        return (<img style={{ height: '50px', width: '100px' }} src={imageSrc} alt={imageSrc.split('_')[1].split('.')[0]} />)\r\n    }\r\n\r\n    render() {\r\n        const { typeChart, typeOne, typeTwo, offense } = this.props;\r\n\r\n        this.tableData = generateTableData(typeChart);\r\n        let typeOneTitle = (typeOne && this.findImageFromTypeName(typeOne.type.name));\r\n        let typeTwoTitle = (typeTwo ? this.findImageFromTypeName(typeTwo.type.name) : null);\r\n\r\n        return (\r\n            <div>\r\n                {this.tableData && <div style={{ maxWidth: '100%' }}>\r\n                    <div style={{ justifyContent: \"center\", alignItems: 'center', display: 'flex' }}>\r\n                        {typeOneTitle}\r\n                        {typeTwoTitle}\r\n                    </div>\r\n                    <MaterialTable\r\n                        columns={[\r\n                            {\r\n                                title: (offense ? 'Deals ' : 'Takes ') + 'x2 Damage', field: 'doubleDamage',\r\n                                render: rowData => (this.customRowRender(rowData.doubleDamage))\r\n                            },\r\n                            {\r\n                                title: (offense ? 'Deals ' : 'Takes ') + '0.5 Damage', field: 'halfDamage',\r\n                                render: rowData => (this.customRowRender(rowData.halfDamage))\r\n                            },\r\n                            {\r\n                                title: (offense ? 'Deals ' : 'Takes ') + 'No Damage', field: 'noDamage',\r\n                                render: rowData => (this.customRowRender(rowData.noDamage))\r\n                            }\r\n                        ]}\r\n                        data={this.tableData}\r\n                        title={null}\r\n                        options={{\r\n                            search: false,\r\n                            sorting: false,\r\n                            filtering: false,\r\n                            grouping: false,\r\n                            selection: false,\r\n                            paging: false\r\n                        }}\r\n                    />\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeTable;","import React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport TypeTable from './TypeTable';\r\nimport damageCalculator from './DamageCalculator';\r\nimport ToggleOffIcon from '@mui/icons-material/ToggleOff';\r\nimport ToggleOnIcon from '@mui/icons-material/ToggleOn';\r\n\r\nclass PokeInfo extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.typeInfoRef = React.createRef();\r\n        this.state = {\r\n            userPokemon: 'pikachu',\r\n            editingUserPokemon: '',\r\n            offense: true,\r\n            loading: true,\r\n            pokemonName: null,\r\n            pokemonImage: null,\r\n            pokemonTypeOne: null,\r\n            pokemonTypeTwo: null,\r\n            errorMessage: \"\"\r\n        };\r\n        this.typeChart = new Map();\r\n        this.typingDamageCalcs = [];\r\n        this.calculatedTypeChart = [];\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Promise.all([\r\n            this.fetchAPIPokemonAndTypes(),\r\n            this.initTypeChart()\r\n        ])\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.loading) {\r\n            this.typingDamageCalcs = [];\r\n            this.initTypeChart();\r\n            this.fetchAPIPokemonAndTypes();\r\n        }\r\n    }\r\n\r\n    async fetchAPIPokemonAndTypes() {\r\n        this.calculatedTypeChart = [];\r\n        this.typingDamageCalcs = [];\r\n        const pokemonData = await this.getPokemonData();\r\n        if (pokemonData) {\r\n            await Promise.all(\r\n                pokemonData.types.map(async (type) => {\r\n                    const typeAPIFetch = await this.getTypeMatch(type.type.url);\r\n                    this.typingDamageCalcs.push({\r\n                        'type': typeAPIFetch.name,\r\n                        'damageCalcs': typeAPIFetch.damage_relations\r\n                    })\r\n                    return (this.typingDamageCalcs);\r\n                })\r\n            )\r\n        }\r\n        this.calculatedTypeChart = damageCalculator(this.typeChart, this.typingDamageCalcs, this.state.offense);\r\n        this.setState({ loading: false });\r\n    }\r\n\r\n    async initTypeChart() {\r\n        const typeUrl = 'https://pokeapi.co/api/v2/type/';\r\n        const typeResponse = await fetch(typeUrl);\r\n        if (typeResponse.status === 200) {\r\n            let typeChartData = await typeResponse.json();\r\n            typeChartData && typeChartData.results.map(typing => {\r\n                return (this.typeChart.set(typing.name, 1));\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"Type Chart Not Fetched\",\r\n            })\r\n        }\r\n    }\r\n\r\n    async getPokemonData() {\r\n        const url = 'https://pokeapi.co/api/v2/pokemon/' + this.state.userPokemon + '/';\r\n        const response = await fetch(url);\r\n        console.log(response.status)\r\n        if (response.status === 200) {\r\n            const pokemonData = await response.json();\r\n            this.setState({\r\n                pokemonName: pokemonData.species.name,\r\n                pokemonTypeOne: pokemonData.types[0],\r\n                pokemonTypeTwo: (pokemonData.types[1] ? pokemonData.types[1] : null),\r\n                pokemonImage: (pokemonData.sprites),\r\n                loading: false,\r\n                errorMessage: \"\"\r\n            });\r\n            return (pokemonData);\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"Pokemon not found, try regional variants or check spelling.\",\r\n            });\r\n        }\r\n    }\r\n\r\n    async getTypeMatch(APIUrlForType) {\r\n        const url = APIUrlForType;\r\n        const response = await fetch(url);\r\n        if (response.status === 200) {\r\n            let typeData = await response.json();\r\n            return (typeData);\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorMessage: \"An error occured when fetching type matchups.\",\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        let newValue = event.target.value;\r\n        this.setState({ editingUserPokemon: newValue });\r\n    }\r\n\r\n    handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        let newPokemon = this.state.editingUserPokemon;\r\n        this.setState({ userPokemon: newPokemon, loading: true });\r\n    }\r\n\r\n    handleToggleOffense = () => {\r\n        this.setState({ offense: !this.state.offense, loading: true });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ padding: '100px 50px 50px 20px' }}>\r\n                {this.state.errorMessage ? this.state.errorMessage : ''}\r\n                <Grid container spacing={2} direction='row' justifyContent=\"center\" alignItems='center' >\r\n                    <Grid item xs={3}>\r\n                        <TextField className=\"userInput\"\r\n                            variant='outlined'\r\n                            value={this.state.editingUserPokemon}\r\n                            onChange={this.handleNameChange}\r\n                        />\r\n                        <Button>\r\n                            <SearchIcon onClick={this.handleNameSubmit} />\r\n                        </Button>\r\n                        {!this.state.errorMessage &&\r\n                            <div className=\"formInline\">\r\n                                {this.state.loading ? 'Loading...' : 'You entered: ' + this.state.pokemonName}\r\n                                {this.state.pokemonImage ? <img src={this.state.pokemonImage.front_default} alt='Not found' /> : ''}\r\n\r\n                            </div>\r\n                        }\r\n                        <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                            Strengths\r\n                            {!this.state.offense ?\r\n                                <ToggleOnIcon sx={{ color: 'red', fontSize: 40 }} onClick={this.handleToggleOffense} /> :\r\n                                <ToggleOffIcon sx={{ color: 'green', fontSize: 40 }} onClick={this.handleToggleOffense} />}\r\n                            Weaknesses\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={9}>\r\n                        <React.Fragment>\r\n                            <TypeTable style={{ padding: '10px' }}\r\n                                typeChart={this.typeChart}\r\n                                damageCalcs={this.typingDamageCalcs}\r\n                                typeOne={this.state.pokemonTypeOne}\r\n                                typeTwo={this.state.pokemonTypeTwo}\r\n                                offense={this.state.offense}\r\n                            />\r\n                        </React.Fragment>\r\n                    </Grid>\r\n                </Grid>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokeInfo;","import React from 'react';\nimport './App.css';\nimport PokeInfo from './components/PokeInfo'\n// import { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\n\n// const theme = createMuiTheme();\n\n// const useStyles = makeStyles((theme) => {\n//   root: {\n//     // some CSS that accesses the theme\n//   }\n// });\n\nfunction App() {\n  return (\n    // <ThemeProvider theme={theme}>\n    <div>\n      <PokeInfo />\n    </div>\n    // </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}